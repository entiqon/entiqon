#!/bin/bash
set -e

# Metadata
VERSION="1.3.0"
TOOL_NAME="gotestx"
AUTHOR="Entiqon Team"
DESCRIPTION="Run Go tests with optional coverage report generation"

WITH_COVERAGE=false
OPEN_COVERAGE=false
QUIET=false
PACKAGES=()

show_help() {
    cat << EOF
$TOOL_NAME v$VERSION
$DESCRIPTION
Author: $AUTHOR

Usage: ./bin/$TOOL_NAME [options] [packages]

Options:
  -c, --with-coverage   Run tests with coverage report generation (coverage.out) (default: false)
  -o, --open-coverage   Open coverage report in browser (only valid with --with-coverage on macOS) (default: false)
  -q, --quiet           Suppress informational messages (only errors and test output shown) (default: false)
  -h, --help            Show this help message and exit
  -v, --version         Show version information and exit

Examples:
  ./bin/$TOOL_NAME
      Run tests for all packages normally
  ./bin/$TOOL_NAME -c
      Run tests with coverage for all packages
  ./bin/$TOOL_NAME ./common
      Run tests only in ./common
  ./bin/$TOOL_NAME -cq ./common ./db
      Run coverage & quiet mode for ./common and ./db
EOF
}

show_version() {
    echo "$VERSION"
    echo
    echo "$TOOL_NAME"
    echo "$DESCRIPTION"
    echo "Author: $AUTHOR"
    echo "Version: $VERSION"
    echo "Processor: $(uname -m) ($(uname -s))"
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        -c|--with-coverage)
            WITH_COVERAGE=true
            ;;
        -o|--open-coverage)
            OPEN_COVERAGE=true
            ;;
        -q|--quiet)
            QUIET=true
            ;;
        -[coq][coq]*)
            flags="${1:1}" # remove dash
            for (( i=0; i<${#flags}; i++ )); do
                case "${flags:$i:1}" in
                    c) WITH_COVERAGE=true ;;
                    o) OPEN_COVERAGE=true ;;
                    q) QUIET=true ;;
                    *)
                        echo "Unknown short option: -${flags:$i:1}"
                        echo "Use -h or --help for usage information."
                        exit 1
                        ;;
                esac
            done
            ;;
        *)
            PACKAGES+=("$1")
            ;;
    esac
    shift
done

# Default to ./... if no packages given
if [ ${#PACKAGES[@]} -eq 0 ]; then
    PACKAGES=("./...")
fi

# Validate and auto-adjust package paths
for i in "${!PACKAGES[@]}"; do
    pkg="${PACKAGES[$i]}"

    # Skip if already using ... expansion
    if [[ "$pkg" == *"..." ]]; then
        continue
    fi

    # Check if directory exists
    if [[ ! -d "$pkg" ]]; then
        echo "Error: Package path '$pkg' does not exist."
        exit 1
    fi

    # Has Go files in root? → keep as is
    if find "$pkg" -maxdepth 1 -type f -name '*.go' | grep -q .; then
        continue
    fi

    # No Go files in root → check subdirs
    if find "$pkg" -mindepth 2 -type f -name '*.go' | grep -q .; then
        if ! $QUIET; then
            echo "Info: No Go files in '$pkg', using subpackages instead ($pkg/...)"
        fi
        PACKAGES[$i]="$pkg/..."
        continue
    fi

    # No Go files anywhere → fail
    echo "Error: No Go files found in '$pkg'."
    exit 1
done

# Auto-enable coverage if open-coverage is set
if $OPEN_COVERAGE && ! $WITH_COVERAGE; then
    WITH_COVERAGE=true
fi

# Only allow --open-coverage on macOS
if $OPEN_COVERAGE && [[ "$(uname)" != "Darwin" ]]; then
    echo "Error: --open-coverage flag is only supported on macOS (Darwin)."
    exit 1
fi

# Run tests
if $WITH_COVERAGE; then
    $QUIET || echo "Running tests with coverage across: ${PACKAGES[*]}"
    go test -coverprofile=coverage.out -covermode=atomic "${PACKAGES[@]}"
else
    $QUIET || echo "Running tests normally across: ${PACKAGES[*]}"
    go test "${PACKAGES[@]}"
fi

# Handle coverage output
if $WITH_COVERAGE; then
    $QUIET || {
        echo "Coverage report saved as coverage.out"
        echo "Run 'go tool cover -html=coverage.out' to view it"
    }

    if $OPEN_COVERAGE; then
        $QUIET || echo "Opening coverage report in browser..."
        go tool cover -html=coverage.out
    fi
fi
