#!/usr/bin/env bash
#
# gsux - Git Stash Utility Extended
# Manage Git stashes: stash, apply, pop, drop, clear, or list
#
# Version: v1.14.0 (Part of Entiqon Ecosystem)

set -euo pipefail

VERSION="v1.14.0"

MODE=""
INDEX=0
MESSAGE="Auto-stash"
UNTRACKED=false
VERBOSE=false

usage() {
  cat <<EOF
gsux - Git Stash Utility Extended
Part of the Entiqon CLI toolkit.

Description:
  A safer, more ergonomic interface to Git stashes.
  Provides stash, apply, pop, drop, clear, and list with
  message support, untracked handling, verbose logs, and CI-friendly defaults.

Usage:
  $(basename "$0") <mode> [options]

Modes:
  stash           Create a new stash
  apply           Apply a stash (default index=0)
  pop             Apply + drop a stash
  drop            Drop a stash at given index
  clear           Clear all stashes
  list            List all stashes

Options:
  -m, --message <msg>   Stash message (for 'stash' mode)
  -i, --index <n>       Specify stash index (default: 0, latest)
  -u, --untracked       Include untracked files (for 'stash' mode)
  -v, --verbose         Enable detailed output
  -V, --version         Show version and system info
  -h, --help            Show this help message and exit

Examples:
  gsux stash -m "WIP changes" -u -v
  gsux apply -i 1 -v
  gsux pop -i 2
  gsux drop -i 0
  gsux clear -v
  gsux list
EOF
}

log() {
  if $VERBOSE; then
    echo "$@"
  fi
}

main() {
  if [[ $# -lt 1 ]]; then
    usage
    exit 1
  fi

  # Global flags (before mode parsing)
  case "$1" in
    -h|--help)
      usage
      exit 0
      ;;
    -V|--version)
      OS=$(uname -s | tr '[:upper:]' '[:lower:]')
      ARCH=$(uname -m)
      echo "Git Stash Utility Extended"
      echo "version $VERSION $OS/$ARCH"
      exit 0
      ;;
  esac

  MODE="$1"
  shift

  # parse options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -m|--message) MESSAGE="$2"; shift ;;
      -i|--index) INDEX="$2"; shift ;;
      -u|--untracked) UNTRACKED=true ;;
      -v|--verbose) VERBOSE=true ;;
      -h|--help) usage; exit 0 ;;
      *) echo "‚ùå Unknown option: $1"; usage; exit 1 ;;
    esac
    shift
  done

  case "$MODE" in
    stash)
      log "üì¶ Creating new stash: \"$MESSAGE\" (untracked=$UNTRACKED)"
      if $UNTRACKED; then
        git stash push -u -m "$MESSAGE"
      else
        git stash push -m "$MESSAGE"
      fi
      log "‚úÖ Stash created"
      ;;
    apply)
      log "üîÑ Applying stash@{$INDEX}"
      git stash apply "stash@{$INDEX}" && log "‚úÖ Applied" || log "‚ùå Failed"
      ;;
    pop)
      log "‚¨áÔ∏è  Popping stash@{$INDEX}"
      git stash pop "stash@{$INDEX}" && log "‚úÖ Popped" || log "‚ùå Failed"
      ;;
    drop)
      log "üóëÔ∏è  Dropping stash@{$INDEX}"
      git stash drop "stash@{$INDEX}" && log "‚úÖ Dropped" || log "‚ùå Failed"
      ;;
    clear)
      log "üî• Clearing all stashes"
      git stash clear && log "‚úÖ Cleared" || log "‚ùå Failed"
      ;;
    list)
      log "üìú Listing all stashes"
      git stash list
      ;;
    *)
      echo "‚ùå Unknown mode: $MODE"
      usage
      exit 1
      ;;
  esac
}

main "$@"
