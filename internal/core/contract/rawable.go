// Code generated by ENTIQON.
// File: internal/core/contracts/rawable.go
// Description: Exposes raw parsed token components—original input, parsed name, parsed alias, and raw SQL reconstruction.
// Since: v1.6.0

package contract

// Rawable exposes the parsed pieces of a token:
//   - GetInput(): the original raw input string
//   - GetName():  the parsed identifier (unquoted)
//   - GetAlias(): the parsed alias (unquoted)
//   - GetRaw():   the reconstructed “raw” SQL fragment: "name" or "name AS alias"
//
// Use Rawable when you need to examine exactly what was parsed and how it
// would look in its simplest SQL form, without quoting or dialect-specific
// transformations. It is separate from Renderable, which focuses on
// dialect-aware quoting and diagnostic output.
//
// A nil Rawable always returns empty strings for all getters.
//
// Example:
//
//	func ExampleRawable() {
//	    var r contracts.Rawable = token.NewBaseToken("users.id AS u")
//
//	    fmt.Println(r.GetInput()) // Output: users.id AS u
//	    fmt.Println(r.GetName())  // Output: users.id
//	    fmt.Println(r.GetAlias()) // Output: u
//	    fmt.Println(r.GetRaw())   // Output: users.id AS u
//
//	    r = token.NewBaseToken("products.price")
//	    fmt.Println(r.GetRaw())   // Output: products.price
//
//	    var nilR contracts.Rawable = nil
//	    fmt.Println(nilR.GetInput(), nilR.GetName(), nilR.GetAlias(), nilR.GetRaw())
//	    // Output:
//	}
type Rawable interface {
	// GetInput returns the original raw input string from which this token was parsed.
	// For example, if NewBaseToken("users.id AS u") was called, GetInput() returns
	// "users.id AS u". If the receiver is nil, GetInput returns the empty string.
	//
	// Example:
	//   token := NewBaseToken("users.name AS n")
	//   fmt.Println(token.GetInput()) // Output: users.name AS n
	GetInput() string

	// GetName returns the parsed identifier (unquoted). Continuing the above example,
	// GetName() returns "users.name". If no valid name was parsed or the receiver
	// is nil, GetName returns the empty string.
	//
	// Example:
	//   token := NewBaseToken("products.price")
	//   fmt.Println(token.GetName()) // Output: products.price
	//
	//   token = NewBaseToken("")      // invalid input → no name parsed
	//   fmt.Println(token.GetName())  // Output: <empty line>
	GetName() string

	// GetAlias returns the parsed alias (unquoted).
	// Nil receiver or no alias → "".
	GetAlias() string

	// GetRaw reconstructs the simplest SQL form of the token:
	//   • "name" if no alias
	//   • "name AS alias" if an alias was parsed
	//
	// Nil receiver → "".
	// This does *not* apply any quoting; it simply concatenates the parsed
	// name and alias exactly as in the input.
	GetRaw() string
}
