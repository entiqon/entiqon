// Code generated by ENTIQON.
// File: internal/core/driver/dialect.go
// Description: Defines the Dialect interface for SQL dialect-specific behaviors.
// Since: v0.0.1

package driver

// Dialect defines the behavior of a SQL dialect.
// Implementations may embed BaseDialect and override specific methods as needed.
type Dialect interface {
	// GetName returns the dialect name (e.g., "postgres", "mysql").
	GetName() string

	// QuoteType returns the quoting style used for identifiers.
	QuoteType() QuotationType

	// QuoteIdentifier quotes a table or column name according to the dialect's rules.
	QuoteIdentifier(name string) string

	// QuoteLiteral returns a safe literal string for diagnostics (not execution).
	QuoteLiteral(value any) string

	// Placeholder returns the dialect-specific placeholder string for a given parameter index.
	// Example: $1 (PostgreSQL), ? (MySQL), :1 (Oracle)
	Placeholder(index int) string

	// RenderFrom renders a FROM clause reference using dialect-specific quoting and aliasing.
	RenderFrom(table string, alias string) string

	// BuildLimitOffset generates the full dialect-specific LIMIT/OFFSET clause.
	BuildLimitOffset(limit, offset int) string

	// SupportsReturning returns true if the dialect supports RETURNING clauses,
	// such as `INSERT ... RETURNING id`. Common in PostgreSQL.
	//
	// Since: v1.4.0
	SupportsReturning() bool

	// SupportsUpsert returns true if the dialect supports native UPSERT syntax,
	// such as `INSERT ... ON CONFLICT DO UPDATE` or similar.
	//
	// Since: v1.4.0
	SupportsUpsert() bool

	// Validate checks whether the dialect is structurally complete and safe to use.
	// Custom dialects may override this method to enforce additional constraints.
	//
	// Since: v1.4.0
	Validate() error
}
