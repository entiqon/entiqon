#!/usr/bin/env bash
#
# gsu - Git Stash Utility
# Manage Git stashes: stash, apply, pop, drop, clear, or list
#
# Version: v1.13.0 (Part of Entiqon Ecosystem)

set -euo pipefail

# Centralized version
if [[ -f "$(dirname "$0")/../VERSION" ]]; then
  VERSION=$(cat "$(dirname "$0")/../VERSION")
else
  VERSION="v1.13.0"
fi

MODE="${GSU_MODE:-}"   # stash, apply, pop, drop, clear, list
INDEX="${GSU_INDEX:-0}"
UNTRACKED="${GSU_UNTRACKED:-false}"
MESSAGE="${GSU_MSG:-Auto-stash}"
QUIET="${GSU_QUIET:-false}"

usage() {
  cat <<EOF
Usage: $(basename "$0") [options] [--stash|--apply|--pop|--drop|--clear|--list]

Options:
  -h, --help             Show this help message and exit
  -v, --version          Show version and exit
  -i, --index <n>        Stash index (default: 0, latest)
  -m, --message <msg>    Stash message (for --stash)
  -u, --untracked        Include untracked files (for --stash)
  -s, --stash            Create a new stash
  -a, --apply            Apply stash (default if no action given)
  -p, --pop              Pop stash (apply + remove)
  -d, --drop             Drop stash at given index
  -c, --clear            Clear all stashes
  -l, --list             List all stashes
  -q, --quiet            Suppress non-essential output

Description:
  Manage Git stashes. You can stash new changes or restore existing ones.

Examples:
  gsu -s -m "WIP changes"
  gsu -s -u
  gsu -a
  gsu -p -i 2
  gsu -d -i 1
  gsu -c
  gsu -l
EOF
}

main() {
  # Parse options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help) usage; exit 0 ;;
      -v|--version) echo "$(basename "$0") $VERSION (Part of Entiqon Ecosystem)"; exit 0 ;;
      -i|--index) INDEX="${2:-}"; shift ;;
      -m|--message) MESSAGE="${2:-}"; shift ;;
      -u|--untracked) UNTRACKED=true ;;
      -s|--stash) MODE="stash" ;;
      -a|--apply) MODE="apply" ;;
      -p|--pop) MODE="pop" ;;
      -d|--drop) MODE="drop" ;;
      -c|--clear) MODE="clear" ;;
      -l|--list) MODE="list" ;;
      -q|--quiet) QUIET=true ;;
      -*) echo "Unknown option: $1"; usage; exit 1 ;;
      *) echo "Unexpected argument: $1"; usage; exit 1 ;;
    esac
    shift
  done

  if [[ -z "$MODE" ]]; then
    echo "Error: must specify a mode (--stash, --apply, --pop, --drop, --clear, --list)"
    echo
    usage
    exit 1
  fi

  case "$MODE" in
    stash)
      if [[ "$UNTRACKED" == "true" || "$UNTRACKED" == "1" ]]; then
        git stash push --include-untracked -m "$MESSAGE"
      else
        git stash push -m "$MESSAGE"
      fi
      [[ "$QUIET" != "true" && "$QUIET" != "1" ]] && echo "‚úÖ Stash created: $MESSAGE"
      ;;
    apply)
      git stash apply "stash@{${INDEX}}"
      [[ "$QUIET" != "true" && "$QUIET" != "1" ]] && echo "‚úÖ Stash applied from index ${INDEX}"
      ;;
    pop)
      git stash pop "stash@{${INDEX}}"
      [[ "$QUIET" != "true" && "$QUIET" != "1" ]] && echo "‚úÖ Stash popped from index ${INDEX}"
      ;;
    drop)
      git stash drop "stash@{${INDEX}}"
      [[ "$QUIET" != "true" && "$QUIET" != "1" ]] && echo "üóëÔ∏è  Stash dropped at index ${INDEX}"
      ;;
    clear)
      git stash clear
      [[ "$QUIET" != "true" && "$QUIET" != "1" ]] && echo "üßπ All stashes cleared"
      ;;
    list)
      git stash list
      ;;
  esac
}

main "$@"
