// Code generated by ENTIQON.
// File: driver/placeholder.go
// Description: Defines PlaceholderStyle enum for SQL dialect placeholder resolution.
// Since: v1.4.0

package styling

import "strings"

// PlaceholderStyle defines the style of positional or named placeholders
// used by a SQL dialect. It is used by BaseDialect to format parameters.
//
// Since: v1.4.0
type PlaceholderStyle string

const (
	// PlaceholderQuestion uses the generic `?` placeholder.
	// Common in: MySQL, SQLite, and most ODBC-compatible drivers.
	PlaceholderQuestion PlaceholderStyle = "?"

	// PlaceholderDollar uses `$n` style placeholders (e.g., $1, $2).
	// Common in: PostgreSQL.
	PlaceholderDollar PlaceholderStyle = "$"

	// PlaceholderColon uses `:n` or `:name` style placeholders.
	// Common in: Oracle, DB2, Informix.
	PlaceholderColon PlaceholderStyle = ":"

	// PlaceholderAt uses `@p1`, `@name`, or similar styles.
	// Common in: Microsoft SQL Server and Sybase.
	PlaceholderAt PlaceholderStyle = "@"
)

// String returns a string representation of the StageError.
func (s PlaceholderStyle) String() string {
	return strings.TrimSpace(string(s))
}

// IsValid returns true if the symbol is a non-empty, printable character or string.
//
// It does not restrict values to the known constants, allowing for developer-defined extensions.
//
// Since: v1.4.0
func (s PlaceholderStyle) IsValid() bool {
	return s.String() != ""
}
