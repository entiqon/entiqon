// Code generated by ENTIQON.
// File: db/internal/build/token/column_factory.go
// Description: Defines a minimal SQL Condition structure for use in builders.
// Since: v1.6.0

package token

import (
	"fmt"
	"strings"
)

// NewColumnsFrom converts comma-separated column expressions into []*Column tokens.
// Accepts both individual names and comma-separated groups.
// Invalid or empty entries return errored columns.
//
// Each entry may be:
//   - A single column (e.g. "id")
//   - A qualified column (e.g. "u.name")
//   - Multiple columns comma-separated (e.g. "id, name")
//
// Returns errored columns when invalid input is detected (e.g. empty entries).
func NewColumnsFrom(input ...string) []*Column {
	var fields []*Column

	for _, arg := range input {
		parts := strings.Split(arg, ",")
		for _, part := range parts {
			trimmed := strings.TrimSpace(part)
			if trimmed == "" {
				fields = append(fields, (&Column{BaseToken: NewBaseToken(part)}).
					SetErrorWith(arg, fmt.Errorf("empty column expression")))
				continue
			}

			if strings.HasPrefix(strings.ToUpper(trimmed), "AS ") {
				fields = append(fields, (&Column{BaseToken: NewBaseToken(part)}).
					SetErrorWith(arg, fmt.Errorf("invalid expression: column name is missing before 'AS'")))
				continue
			}

			fields = append(fields, NewColumn(trimmed))
		}
	}

	return fields
}
