// Code generated by ENTIQON.
// File: db/driver/sqlite.go
// Description: Provides SQLiteDialect configuration for use with Entiqon builders.
// Since: v1.5.0

package driver

import "github.com/entiqon/entiqon/db/driver/styling"

// NewSQLiteDialect returns a new Dialect implementation for SQLite,
// using the default behaviors appropriate for SQLite version >= 3.35.
//
// This dialect supports:
//   - Quoting using double quotes (`"column"`), as per SQL standard.
//   - Positional placeholders using `?` (unnumbered), commonly used in SQLite.
//   - Full aliasing support, both with and without the `AS` keyword.
//   - `RETURNING` clause support (since SQLite 3.35).
//   - `UPSERT` support (since SQLite 3.24) via `ON CONFLICT` clause.
//
// These capabilities align SQLite closer to PostgreSQL behavior compared to MySQL.
// Note: Feature support may vary if SQLite versions < 3.35 are used at runtime.
//
// See also:
//   - https://www.sqlite.org/lang_insert.html
//   - https://www.sqlite.org/lang_returning.html
//   - https://www.sqlite.org/lang_upsert.html
func NewSQLiteDialect() Dialect {
	return &BaseDialect{
		Name:             "SQLite",
		QuoteStyle:       styling.QuoteDouble,         // uses "column"
		PlaceholderStyle: styling.PlaceholderQuestion, // uses ?
		EnableAliasing:   true,
		EnableReturning:  true,
		EnableUpsert:     true,
	}
}

// Ensure that BaseDialect implements the Dialect interface.
var _ Dialect = &BaseDialect{}
